#!/bin/sh
# Copied from https://github.com/zimbatm/shell-env
=begin 2>/dev/null
if ! [ -z "$RUBYOPT" ]; then
  export SHELLENV_RUBYOPT="$RUBYOPT"
  unset RUBYOPT
fi
exec ${SHELLENV_RUBY:-ruby} -e"\$0='$0'; load '$0'" -- $@
=end

require 'shellwords'
require 'base64'
require 'zlib'

module ShellEnv
  IGNORE_KEYS = %w{_ PWD OLDPWD SHLVL SHELL}
  
  # Returns the difference of two env hashes. Suppressions are represented as
  # nil values.
  def diff_env(env1, env2, &each_pair)
    new_env = (env1.keys | env2.keys).inject({}) do |diff, k|
      if env2[k] != env1[k] && !IGNORE_KEYS.include?(k)
        diff[k] = env2[k] 
      end
      diff
    end
    if block_given?
      new_env.each_pair(&each_pair)
    end
    new_env
  end
  
  # Returns an encoded string of a env hash. See #unmarshal_env
  def marshal_env(env)
    Base64.encode64(
      Zlib::Deflate.deflate(
        Marshal.dump(env), Zlib::BEST_COMPRESSION
      )
    ).gsub("\n",'')
  end
  
  # Returns a env hash from an encoded string. See #marshal_env
  def unmarshal_env(str)
    Marshal.load(
      Zlib::Inflate.inflate(
        Base64.decode64(str)))
  end
  
  def has_backup?(env)
    !!env['SHELLENV_BACKUP']
  end

  def env_path(env)
    env['SHELLENV']
  end
  
  # Looks the path up to / for the first .envrc file. Returns the path where
  # the file lies or nil if not found.
  def find_rc(path)
    deep = 0
    while deep < 255 do
      deep += 1
      if File.exists? File.join(path, '.envrc')
        return path
      elsif path == '/'
        return nil
      end
      old_path = path
      path = File.dirname(path)
      if path == old_path
        abort "BUG in find_rc. #{path} == #{old_path}"
      end
    end
    abort "More that 255 directories searched. WTF ?. Current: #{path}"
  end
  
  # Restore old env
  def restore_env(env)
    abort "No backup found" unless env['SHELLENV_BACKUP']
    
    return unmarshal_env(env['SHELLENV_BACKUP'])
  rescue
    abort "BUG: Corrupt SHELLENV_BACKUP detected"
  end

  # No need to re-load env if path is the same
  def already_loaded?(env, rc_dir)
    env['SHELLENV'] == rc_dir
  end

  def load_env(env, rc_dir)
    new_env = env.dup
    if new_env['SHELLENV_BACKUP']
      abort "BUG: env already loaded"
    end
    
    # backup current ENV
    new_env['SHELLENV_BACKUP'] = marshal_env(env)
    new_env['SHELLENV'] = rc_dir
  
    env_str = with_env(new_env) do
      `/bin/sh -c \"set -e; . '#{rc_dir}/.envrc' >&2 && #{__FILE__.shellescape} marshall\"`
    end
    
    if $?.exitstatus > 0
      abort "#{rc_dir}/.envrc error with exit status #{$?.exitstatus}. #{env_str}"
    end

    Marshal.load(env_str)
  end
  
  def to_shell(env_diff)
    str = ""
    env_diff.each_pair do |k,v|
      if v
        str += "#{k}=#{v.shellescape}; export #{k};"
      else
        if k == "PS1"
          # unsetting PS1 doesn't restore the default in OSX's bash
        else
          str += "unset #{k};"
        end
      end
    end
    str
  end
  
  #
  def with_env(env, &block)
    env_bak = ::ENV.to_hash
    diff_env(env_bak, env) do |k,v|
      ::ENV[k] = v
    end
    return yield
  ensure
    diff_env(env, env_bak) do |k, v|
      ::ENV[k] = v
    end
  end

private

  def debug(msg); $stderr.puts "DBG: #{msg}" end
  #def debug(msg); nil end

end

if __FILE__ == $0
  include ShellEnv

  # Restore RUBYOPT
  if ENV['SHELLENV_RUBYOPT']
    ENV['RUBYOPT'] = ENV.delete('SHELLENV_RUBYOPT')
  end

  if ARGV[0] == "marshall"
    puts Marshal.dump(ENV.to_hash)
    exit
  end

  cur_env = ENV.to_hash
  begin
    rc_dir = find_rc(Dir.pwd)
  rescue Errno::ENOENT # Current directory does not exist
    $stderr.puts "Current directory does not exist"
    rc_dir = nil
  end
  
  if already_loaded?(cur_env, rc_dir)
    exit
  elsif rc_dir
    if has_backup?(cur_env)
      $stderr.puts "Switching env from #{env_path(cur_env)} to #{rc_dir}"
      new_env = restore_env(cur_env)
    else
      $stderr.puts "Loading env at #{rc_dir}"
      new_env = cur_env
    end
    new_env = load_env(new_env, rc_dir)
    puts to_shell(diff_env(cur_env, new_env))
  elsif has_backup?(cur_env)
    $stderr.puts "Restoring old env after #{env_path(cur_env)}"
    old_env = restore_env(cur_env)
    puts to_shell(diff_env(cur_env, old_env))
  else
    # No env, no rc. Nothing to do
  end
end
