" Maintainer:	Michael Grubb

" This must be first, because it changes other options as a side effect.
set nocompatible
""""""""""""""""""""""""""""""""""""""""""""" Global variables
let g:project_lib_prefix = 'lib'
let g:rails_level=3
let g:tskelTitle = "Test Title"
let perl_fold = 1
let perl_nofold_packages = 1

" Disable some less often used plugins
let g:loaded_dbext = 1
" let g:loaded_rails = 1
let g:loaded_autotmpl = 1

" Configure Tasklist
let g:tlWindowPosition = 1
let g:cvWindowPosition = 1

" Define default modeline for template expansion
let g:defmodeline = "sw=4:ts=4:ai"

" Tell the shell syntax file that I prefer kornshell
let g:is_kornshell = 1

" Invoke pathogen.
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" Include my custom utiltities and vimwiki configs
runtime vimwikirc.vim
runtime utils.vim

set backspace=indent,eol,start " allow backspacing over everything in insert mode
set history=250                " keep 250 lines of command line history
set ruler                      " show the cursor position all the time
set showcmd                    " display incomplete commands
set showmode                   " show insert mode
set incsearch                  " do incremental searching
set tabstop=4
set shiftwidth=4
set noexpandtab
set nobackup
set showbreak==>
set display+=lastline
set lcs=tab:\|\ 
set viminfo='0,<0,s0,h
set vb
" Add Git status information to statusline
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" Don't use Ex mode, use Q for formatting
map Q gq

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Autocommands
" Only do this part when compiled with support for autocommands.
if has("autocmd")
  filetype plugin indent on
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

" For all text files set 'textwidth' to 79 characters.
" autocmd FileType text setlocal textwidth=79

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
	autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

	autocmd BufRead *.lyx set syntax=lyx foldmethod=syntax foldcolumn=3
	autocmd BufRead *.lyx syntax sync fromstart

	autocmd User Rails*			Rabbrev lta link_to\ :action\ =>\ 
	autocmd User Rails*			Rabbrev	ltc link_to\ :controller\ =>\ 

	autocmd filetype lisp,scheme,art setlocal equalprg=~/bin/lispindent.lisp
	autocmd filetype lisp,scheme,art inoremap ( ()i
	autocmd filetype lisp,scheme,art inoremap ) la

	autocmd BufRead,BufNewFile * let b:defmodeline = g:defmodeline
	autocmd BufRead,BufNewFile *.rb let b:defmodeline = "sw=2:ts=2:ai"

	autocmd BufWritePre */secaudit/tests/*.t :Renumber

	" Remove fugitive buffers when they get hidden
	autocmd BufReadPost fugitive://* set bufhidden=delete
	augroup filetypedetect
		au BufRead,BufNewFile Pakefile setf Pakefile
		au BufRead,BufNewFile *.wiki nmap <Leader>d a= <C-R>=strftime("%a %e %b %Y")<CR> =<Esc>
		au BufRead,BufNewFile *.wiki echo "autocmd for wiki"
		au BufRead,BufNewFile */secaudit/*/*.{conf,audit} set ft=apachestyle
	augroup END

endif " has("autocmd")

set autoindent		" always set autoindenting on


function BigWindowProject(files)
	set lines=50
	set columns=132
	if exists(a:files)
		:Project a:files
	else
		:Project
	endif

endfunction
command -nargs=? -complete=file BWProject :call BigWindowProject('<args>')

""""""""""""""""""""""""""""""""""""""""""""" Key mappings
map <F5> {!}fmt

" make Ctrl-Y wordwise
inoremap <C-Y> <Esc>kl"zyiWj"zpa

" leave cursor at at position of edit
map . .`[
noremap <F2> :NERDTreeToggle<CR>
nnoremap <silent> ,yr :YRShow<CR>
nnoremap <F6> :GundoToggle<CR>
